// 1. Пусть дан LinkedList с несколькими элементами. 
// Реализуйте метод, который вернет “перевернутый” список.

package Lesson4;

import java.util.LinkedList;

public class hw_4_1 {

    public static void main(String[] args) {

        int[] initiallist = {5,3,2,6,7,4,9, 1};
        LinkedList<Integer> linkList = new LinkedList<>();

        for (Integer temp : initiallist) {
            linkList.add(temp);
        }
        
        int temp = 0;
        while (temp != linkList.size() - 1) {
            linkList.add(linkList.size()-temp, linkList.getFirst());
            linkList.removeFirst();
            temp++;
        }


        System.out.println(linkList);

        
}

}

// 2. Реализуйте очередь с помощью LinkedList со следующими методами:
// enqueue() - помещает элемент в конец очереди, 
// dequeue() - возвращает первый элемент из очереди и удаляет его, 
// first() - возвращает первый элемент из очереди, не удаляя.

package Lesson4;

import java.util.LinkedList;

public class hw_4_2 {

    public static void main(String[] args) {

        int[] initiallist = { 99 , 3, 5, 7, 10, 11 };

        LinkedList<Integer> linkList = new LinkedList<>();
        for (Integer temp : initiallist) {
            linkList.add(temp);
        }

        System.out.println(linkList);

        enqueue(linkList, 100);
        System.out.println(linkList);

        System.out.println(dequeue(linkList));
        System.out.println(linkList);

        System.out.println(first(linkList));
    }

    public static void enqueue(LinkedList<Integer> list, int num) {
        list.addLast(num);
    }

    public static int dequeue(LinkedList<Integer> list) {
        int num = 0;
        num = list.get(0);
        list.remove(0);
        return num;
    }

    public static int first(LinkedList<Integer> list) {
        int num = 0;
        num = list.get(0);
        return num;
    }
}

